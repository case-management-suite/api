// Code generated by go-swagger; DO NOT EDIT.

package ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetActionRecordsHandlerFunc turns a function with the right signature into a get action records handler
type GetActionRecordsHandlerFunc func(GetActionRecordsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetActionRecordsHandlerFunc) Handle(params GetActionRecordsParams) middleware.Responder {
	return fn(params)
}

// GetActionRecordsHandler interface for that can handle valid get action records params
type GetActionRecordsHandler interface {
	Handle(GetActionRecordsParams) middleware.Responder
}

// NewGetActionRecords creates a new http.Handler for the get action records operation
func NewGetActionRecords(ctx *middleware.Context, handler GetActionRecordsHandler) *GetActionRecords {
	return &GetActionRecords{Context: ctx, Handler: handler}
}

/*
	GetActionRecords swagger:route GET /case/{id}/actions getActionRecords

# Find the action records for a given case

This will retrieve actions
*/
type GetActionRecords struct {
	Context *middleware.Context
	Handler GetActionRecordsHandler
}

func (o *GetActionRecords) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetActionRecordsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
