// Code generated by go-swagger; DO NOT EDIT.

package ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCaseHandlerFunc turns a function with the right signature into a create case handler
type CreateCaseHandlerFunc func(CreateCaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCaseHandlerFunc) Handle(params CreateCaseParams) middleware.Responder {
	return fn(params)
}

// CreateCaseHandler interface for that can handle valid create case params
type CreateCaseHandler interface {
	Handle(CreateCaseParams) middleware.Responder
}

// NewCreateCase creates a new http.Handler for the create case operation
func NewCreateCase(ctx *middleware.Context, handler CreateCaseHandler) *CreateCase {
	return &CreateCase{Context: ctx, Handler: handler}
}

/*
	CreateCase swagger:route PUT /case createCase

# Create a new case

This will show all available cases
*/
type CreateCase struct {
	Context *middleware.Context
	Handler CreateCaseHandler
}

func (o *CreateCase) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateCaseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
