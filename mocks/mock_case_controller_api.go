// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/case-controller-api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/case-management-suite/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCaseControllerAPI is a mock of CaseControllerAPI interface.
type MockCaseControllerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCaseControllerAPIMockRecorder
}

// MockCaseControllerAPIMockRecorder is the mock recorder for MockCaseControllerAPI.
type MockCaseControllerAPIMockRecorder struct {
	mock *MockCaseControllerAPI
}

// NewMockCaseControllerAPI creates a new mock instance.
func NewMockCaseControllerAPI(ctrl *gomock.Controller) *MockCaseControllerAPI {
	mock := &MockCaseControllerAPI{ctrl: ctrl}
	mock.recorder = &MockCaseControllerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaseControllerAPI) EXPECT() *MockCaseControllerAPIMockRecorder {
	return m.recorder
}

// ExecuteAction mocks base method.
func (m *MockCaseControllerAPI) ExecuteAction(id, action string, context context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAction", id, action, context)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAction indicates an expected call of ExecuteAction.
func (mr *MockCaseControllerAPIMockRecorder) ExecuteAction(id, action, context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAction", reflect.TypeOf((*MockCaseControllerAPI)(nil).ExecuteAction), id, action, context)
}

// FindCase mocks base method.
func (m *MockCaseControllerAPI) FindCase(id string, spec models.CaseRecordSpec) (models.CaseRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCase", id, spec)
	ret0, _ := ret[0].(models.CaseRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCase indicates an expected call of FindCase.
func (mr *MockCaseControllerAPIMockRecorder) FindCase(id, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCase", reflect.TypeOf((*MockCaseControllerAPI)(nil).FindCase), id, spec)
}

// FindCaseActions mocks base method.
func (m *MockCaseControllerAPI) FindCaseActions(caseId models.Identifier, spec models.CaseActionSpec) ([]models.CaseAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCaseActions", caseId, spec)
	ret0, _ := ret[0].([]models.CaseAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCaseActions indicates an expected call of FindCaseActions.
func (mr *MockCaseControllerAPIMockRecorder) FindCaseActions(caseId, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCaseActions", reflect.TypeOf((*MockCaseControllerAPI)(nil).FindCaseActions), caseId, spec)
}

// GetCases mocks base method.
func (m *MockCaseControllerAPI) GetCases(arg0 models.CaseRecordSpec) ([]models.CaseRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCases", arg0)
	ret0, _ := ret[0].([]models.CaseRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCases indicates an expected call of GetCases.
func (mr *MockCaseControllerAPIMockRecorder) GetCases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCases", reflect.TypeOf((*MockCaseControllerAPI)(nil).GetCases), arg0)
}

// NewCase mocks base method.
func (m *MockCaseControllerAPI) NewCase(context context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCase", context)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCase indicates an expected call of NewCase.
func (mr *MockCaseControllerAPIMockRecorder) NewCase(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCase", reflect.TypeOf((*MockCaseControllerAPI)(nil).NewCase), context)
}
